import sqlite3
import time
from telegram import Update
from telegram.ext import ContextTypes, CallbackContext
from bot.database import DB_PATH

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data
    user_id = query.from_user.id

    action, masterclass_id = data.split(":")
    masterclass_id = int(masterclass_id)

    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()

    if action == "register":
        cur.execute("SELECT capacity FROM masterclasses WHERE id=?", (masterclass_id,))
        row = cur.fetchone()
        if not row:
            await query.edit_message_text("–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        capacity = row[0]

        cur.execute("SELECT COUNT(*) FROM registrations WHERE masterclass_id=? AND status='registered'", (masterclass_id,))
        registered_count = cur.fetchone()[0]

        cur.execute("SELECT status FROM registrations WHERE user_id=? AND masterclass_id=?", (user_id, masterclass_id))
        existing = cur.fetchone()
        if existing:
            await query.edit_message_text(f"–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã. –°—Ç–∞—Ç—É—Å: {existing[0]}")
            return

        timestamp = int(time.time())
        if registered_count < capacity:
            cur.execute("INSERT INTO registrations (user_id, masterclass_id, status, timestamp) VALUES (?, ?, 'registered', ?)",
                        (user_id, masterclass_id, timestamp))
            await query.edit_message_text("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å!")
        else:
            cur.execute("INSERT INTO registrations (user_id, masterclass_id, status, timestamp) VALUES (?, ?, 'waitlist', ?)",
                        (user_id, masterclass_id, timestamp))

            cur.execute("SELECT COUNT(*) FROM registrations WHERE masterclass_id=? AND status='waitlist' AND timestamp<=?",
                        (masterclass_id, timestamp))
            position = cur.fetchone()[0]

            await query.edit_message_text(
                f"–í—Å–µ –º–µ—Å—Ç–∞ –∑–∞–Ω—è—Ç—ã. –í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –ª–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è. –í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è: {position}"
            )

    elif action == "unregister":
        cur.execute("SELECT status FROM registrations WHERE user_id=? AND masterclass_id=?", (user_id, masterclass_id))
        row = cur.fetchone()

        if not row:
            await query.edit_message_text("–í—ã –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ—Ç –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å.")
            return

        cur.execute("DELETE FROM registrations WHERE user_id=? AND masterclass_id=?", (user_id, masterclass_id))
        await query.edit_message_text("–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞.")

        # –û—Å–≤–æ–±–æ–¥–∏–ª–æ—Å—å –º–µ—Å—Ç–æ ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏–º —Å–ª–µ–¥—É—é—â–µ–º—É –≤ –æ—á–µ—Ä–µ–¥–∏
        cur.execute("""SELECT user_id FROM registrations
                       WHERE masterclass_id=? AND status='waitlist'
                       ORDER BY timestamp ASC LIMIT 1""", (masterclass_id,))
        next_user = cur.fetchone()
        if next_user:
            next_id = next_user[0]
            cur.execute("""UPDATE registrations SET status='registered' 
                           WHERE user_id=? AND masterclass_id=?""", (next_id, masterclass_id))
            await context.bot.send_message(
                chat_id=next_id,
                text=f"üì¢ –û—Å–≤–æ–±–æ–¥–∏–ª–æ—Å—å –º–µ—Å—Ç–æ –Ω–∞ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å #{masterclass_id}!\n"
                     f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É—á–∞—Å—Ç–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç –∫–æ–º–∞–Ω–¥–æ–π:\n"
                     f"/confirm {masterclass_id}"
            )

    conn.commit()
    conn.close()
